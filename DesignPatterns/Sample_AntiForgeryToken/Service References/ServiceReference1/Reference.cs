//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sample_AntiForgeryToken.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectedInfo", Namespace="http://schemas.datacontract.org/2004/07/WIMI.BTL.CutterService.Cutter.Dto")]
    [System.SerializableAttribute()]
    public partial class ConnectedInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CutterCompensationSideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FanucCutterCompensationAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FanucCutterCompensationArrayLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FanucCutterStartIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MachineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MachineSystemTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XAliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YAliasField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CutterCompensationSide {
            get {
                return this.CutterCompensationSideField;
            }
            set {
                if ((this.CutterCompensationSideField.Equals(value) != true)) {
                    this.CutterCompensationSideField = value;
                    this.RaisePropertyChanged("CutterCompensationSide");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FanucCutterCompensationAddress {
            get {
                return this.FanucCutterCompensationAddressField;
            }
            set {
                if ((this.FanucCutterCompensationAddressField.Equals(value) != true)) {
                    this.FanucCutterCompensationAddressField = value;
                    this.RaisePropertyChanged("FanucCutterCompensationAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FanucCutterCompensationArrayLength {
            get {
                return this.FanucCutterCompensationArrayLengthField;
            }
            set {
                if ((this.FanucCutterCompensationArrayLengthField.Equals(value) != true)) {
                    this.FanucCutterCompensationArrayLengthField = value;
                    this.RaisePropertyChanged("FanucCutterCompensationArrayLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FanucCutterStartIndex {
            get {
                return this.FanucCutterStartIndexField;
            }
            set {
                if ((this.FanucCutterStartIndexField.Equals(value) != true)) {
                    this.FanucCutterStartIndexField = value;
                    this.RaisePropertyChanged("FanucCutterStartIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MachineId {
            get {
                return this.MachineIdField;
            }
            set {
                if ((this.MachineIdField.Equals(value) != true)) {
                    this.MachineIdField = value;
                    this.RaisePropertyChanged("MachineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MachineSystemType {
            get {
                return this.MachineSystemTypeField;
            }
            set {
                if ((this.MachineSystemTypeField.Equals(value) != true)) {
                    this.MachineSystemTypeField = value;
                    this.RaisePropertyChanged("MachineSystemType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence {
            get {
                return this.SequenceField;
            }
            set {
                if ((this.SequenceField.Equals(value) != true)) {
                    this.SequenceField = value;
                    this.RaisePropertyChanged("Sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TValue {
            get {
                return this.TValueField;
            }
            set {
                if ((this.TValueField.Equals(value) != true)) {
                    this.TValueField = value;
                    this.RaisePropertyChanged("TValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeOut {
            get {
                return this.TimeOutField;
            }
            set {
                if ((this.TimeOutField.Equals(value) != true)) {
                    this.TimeOutField = value;
                    this.RaisePropertyChanged("TimeOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double XAlias {
            get {
                return this.XAliasField;
            }
            set {
                if ((this.XAliasField.Equals(value) != true)) {
                    this.XAliasField = value;
                    this.RaisePropertyChanged("XAlias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YAlias {
            get {
                return this.YAliasField;
            }
            set {
                if ((this.YAliasField.Equals(value) != true)) {
                    this.YAliasField = value;
                    this.RaisePropertyChanged("YAlias");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanucToolManageDll.TOOL_OFFSET", Namespace="http://schemas.datacontract.org/2004/07/FanucToolManageDll")]
    [System.SerializableAttribute()]
    public partial struct FanucToolManageDllTOOL_OFFSET : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nToolNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nYField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nR {
            get {
                return this.nRField;
            }
            set {
                if ((this.nRField.Equals(value) != true)) {
                    this.nRField = value;
                    this.RaisePropertyChanged("nR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nT {
            get {
                return this.nTField;
            }
            set {
                if ((this.nTField.Equals(value) != true)) {
                    this.nTField = value;
                    this.RaisePropertyChanged("nT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nToolNum {
            get {
                return this.nToolNumField;
            }
            set {
                if ((this.nToolNumField.Equals(value) != true)) {
                    this.nToolNumField = value;
                    this.RaisePropertyChanged("nToolNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nX {
            get {
                return this.nXField;
            }
            set {
                if ((this.nXField.Equals(value) != true)) {
                    this.nXField = value;
                    this.RaisePropertyChanged("nX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nY {
            get {
                return this.nYField;
            }
            set {
                if ((this.nYField.Equals(value) != true)) {
                    this.nYField = value;
                    this.RaisePropertyChanged("nY");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanucToolManageDll.TOOL_LIFE", Namespace="http://schemas.datacontract.org/2004/07/FanucToolManageDll")]
    [System.SerializableAttribute()]
    public partial struct FanucToolManageDllTOOL_LIFE : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nLifeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nToolNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nUsedField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nLife {
            get {
                return this.nLifeField;
            }
            set {
                if ((this.nLifeField.Equals(value) != true)) {
                    this.nLifeField = value;
                    this.RaisePropertyChanged("nLife");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nToolNum {
            get {
                return this.nToolNumField;
            }
            set {
                if ((this.nToolNumField.Equals(value) != true)) {
                    this.nToolNumField = value;
                    this.RaisePropertyChanged("nToolNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nUsed {
            get {
                return this.nUsedField;
            }
            set {
                if ((this.nUsedField.Equals(value) != true)) {
                    this.nUsedField = value;
                    this.RaisePropertyChanged("nUsed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICutterService")]
    public interface ICutterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetThresholdValue", ReplyAction="http://tempuri.org/ICutterService/GetThresholdValueResponse")]
        uint GetThresholdValue(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetThresholdValue", ReplyAction="http://tempuri.org/ICutterService/GetThresholdValueResponse")]
        System.Threading.Tasks.Task<uint> GetThresholdValueAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetThresholdValue2", ReplyAction="http://tempuri.org/ICutterService/GetThresholdValue2Response")]
        string GetThresholdValue2(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetThresholdValue2", ReplyAction="http://tempuri.org/ICutterService/GetThresholdValue2Response")]
        System.Threading.Tasks.Task<string> GetThresholdValue2Async(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetThresholdValue3", ReplyAction="http://tempuri.org/ICutterService/GetThresholdValue3Response")]
        uint GetThresholdValue3(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetThresholdValue3", ReplyAction="http://tempuri.org/ICutterService/GetThresholdValue3Response")]
        System.Threading.Tasks.Task<uint> GetThresholdValue3Async(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetCutterCompensationData", ReplyAction="http://tempuri.org/ICutterService/GetCutterCompensationDataResponse")]
        Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_OFFSET[] GetCutterCompensationData(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetCutterCompensationData", ReplyAction="http://tempuri.org/ICutterService/GetCutterCompensationDataResponse")]
        System.Threading.Tasks.Task<Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_OFFSET[]> GetCutterCompensationDataAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/UpdateCutterCompensation", ReplyAction="http://tempuri.org/ICutterService/UpdateCutterCompensationResponse")]
        bool UpdateCutterCompensation(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/UpdateCutterCompensation", ReplyAction="http://tempuri.org/ICutterService/UpdateCutterCompensationResponse")]
        System.Threading.Tasks.Task<bool> UpdateCutterCompensationAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetAllToolLifeInfo_T", ReplyAction="http://tempuri.org/ICutterService/GetAllToolLifeInfo_TResponse")]
        Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_LIFE[] GetAllToolLifeInfo_T(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICutterService/GetAllToolLifeInfo_T", ReplyAction="http://tempuri.org/ICutterService/GetAllToolLifeInfo_TResponse")]
        System.Threading.Tasks.Task<Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_LIFE[]> GetAllToolLifeInfo_TAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICutterServiceChannel : Sample_AntiForgeryToken.ServiceReference1.ICutterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CutterServiceClient : System.ServiceModel.ClientBase<Sample_AntiForgeryToken.ServiceReference1.ICutterService>, Sample_AntiForgeryToken.ServiceReference1.ICutterService {
        
        public CutterServiceClient() {
        }
        
        public CutterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CutterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CutterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CutterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public uint GetThresholdValue(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetThresholdValue(input);
        }
        
        public System.Threading.Tasks.Task<uint> GetThresholdValueAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetThresholdValueAsync(input);
        }
        
        public string GetThresholdValue2(int value) {
            return base.Channel.GetThresholdValue2(value);
        }
        
        public System.Threading.Tasks.Task<string> GetThresholdValue2Async(int value) {
            return base.Channel.GetThresholdValue2Async(value);
        }
        
        public uint GetThresholdValue3(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetThresholdValue3(input);
        }
        
        public System.Threading.Tasks.Task<uint> GetThresholdValue3Async(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetThresholdValue3Async(input);
        }
        
        public Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_OFFSET[] GetCutterCompensationData(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetCutterCompensationData(input);
        }
        
        public System.Threading.Tasks.Task<Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_OFFSET[]> GetCutterCompensationDataAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetCutterCompensationDataAsync(input);
        }
        
        public bool UpdateCutterCompensation(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.UpdateCutterCompensation(input);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCutterCompensationAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.UpdateCutterCompensationAsync(input);
        }
        
        public Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_LIFE[] GetAllToolLifeInfo_T(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetAllToolLifeInfo_T(input);
        }
        
        public System.Threading.Tasks.Task<Sample_AntiForgeryToken.ServiceReference1.FanucToolManageDllTOOL_LIFE[]> GetAllToolLifeInfo_TAsync(Sample_AntiForgeryToken.ServiceReference1.ConnectedInfo input) {
            return base.Channel.GetAllToolLifeInfo_TAsync(input);
        }
    }
}
